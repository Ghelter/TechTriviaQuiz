<!--header-->
<%- include('include/_header')%>
<!--header-->


<body>
    <div class="container-aws">
        <div id="game" class="justify-center flex-column">
            <div id="hud">
                <div class="hud-item">
                    <p id="progressText" class="hud-prefix">
                        Question
                    </p>
                    <div id="progressBar-aws">
                        <div id="progressBarFull"></div>
                    </div>
                </div>
                <div class="hud-item">
                    <p class="hud-prefix">
                        Score
                    </p>
                    <h1 class="hud-main-text" id="score">
                        0
                    </h1>
                </div>
            </div>
            <h1 id="question">What is the answer to this question</h1>
            <div class="choice-container-aws">
                <p class="choice-prefix-aws">A</p>
                <p class="choice-text" data-number="1">Choice</p>
            </div>
            <div class="choice-container-aws">
                <p class="choice-prefix-aws">B</p>
                <p class="choice-text" data-number="2">Choice 2</p>
            </div>
            <div class="choice-container-aws">
                <p class="choice-prefix-aws">C</p>
                <p class="choice-text" data-number="3">Choice 3</p>
            </div>
            <div class="choice-container-aws">
                <p class="choice-prefix-aws">D</p>
                <p class="choice-text" data-number="4">Choice 4</p>
            </div>
        </div>
    </div>


<script>

const question = document.querySelector('#question');
const choices = Array.from(document.querySelectorAll('.choice-text'));
const progressText = document.querySelector('#progressText');
const scoreText = document.querySelector('#score');
const progressBarFull = document.querySelector('#progressBarFull');

let currentQuestion = {}
let acceptingAnswers = true
let score = 0
let questionCounter = 0
let availableQuestions = []

let questions = [
    {
        question: 'A large company is interested in avoiding long-term contracts and moving from fixed costs to variable costs. What is the Value proposition of AWS for htis company?',
        choice1: 'Economis of scale',
        choice2: 'pay-as-you-go pricing',
        choice3: 'Volume pricing discounts',
        choice4: 'Automated cost optimazation',
        answer: 2,
    },
    {
        question: "What advantages does a database administrator obtain by using Amazon Relational Database service (RDS)?",
        choice1: "RDS provides 99.99% reliability and durability",
        choice2: "RDS Database automatically scale based on load",
        choice3: "RDS enables users to dyanmically adjust CPU and RAM resources",
        choice4: "RDS simplifies relational database administration tasks",
        answer: 4,
    },
    {
        question: "A customer needs to determine Total Cost of ownership (TCO) for a workload that requires physical isolation. Which hosting model should be used?",
        choice1: "Dedicated Hosts",
        choice2: "Reserved Instances",
        choice3: "On-Demand Instances",
        choice4: "Spot Instances",
        answer: 1,
    },
    {
        question: "Which design principle is enabled by the AWS Cloud to improve the operation of workloads?",
        choice1: "Minimize platform design",
        choice2: "Loose coupling",
        choice3: "Customized hardware",
        choice4: "Minimum viable product",
        answer: 1,
    },
    {
        question: "A user is planning to launch three EC2 instances behind a single Elastic Load Balancer. The deployment should be highly available.",
        choice1: "Launch the instances across multiple Availability Zones in a single AWS Region",
        choice2: "Launch the instances as EC2 Spot Instances in the same AWS Region and the same Availability Zone.",
        choice3: "Launch the instances in multiple AWS Regions, and use Elastic IP addresses.",
        choice4: "Launch the instances as EC2 Reserved Instances in the same AWS Region, but in the different Availability Zones.",
        answer: 1,
    }
]

const SCORE_POINTS = 400
const MAX_QUESTIONS = 5

startGame = () => {
    questionCounter = 0
    score = 0
    availableQuestions = [...questions]
    getNewQuestion()
}

getNewQuestion = () => {
    if(availableQuestions.length === 0 || questionCounter > MAX_QUESTIONS) {
        localStorage.setItem('mostRecentScore', score)

        return window.location.href = ("/awsEnd")
    }

    questionCounter++
    progressText.innerText = `Question ${questionCounter} of ${MAX_QUESTIONS}`
    progressBarFull.style.width = `${(questionCounter/MAX_QUESTIONS) * 100}%`
    
    const questionsIndex = Math.floor(Math.random() * availableQuestions.length)
    currentQuestion = availableQuestions[questionsIndex]
    question.innerText = currentQuestion.question

    choices.forEach(choice => {
        const number = choice.dataset['number']
        choice.innerText = currentQuestion['choice' + number]
    })

    availableQuestions.splice(questionsIndex, 1)

    acceptingAnswers = true
}

choices.forEach(choice => {
    choice.addEventListener('click', e => {
        if(!acceptingAnswers) return

        acceptingAnswers = false
        const selectedChoice = e.target
        const selectedAnswer = selectedChoice.dataset['number']

        let classToApply = selectedAnswer == currentQuestion.answer ? 'correct' : 'incorrect'

        if(classToApply === 'correct') {
            incrementScore(SCORE_POINTS)
        }

        selectedChoice.parentElement.classList.add(classToApply)

        setTimeout(() => {
            selectedChoice.parentElement.classList.remove(classToApply)
            getNewQuestion()

        }, 1000)
    })
})

incrementScore = num => {
    score +=num
    scoreText.innerText = score
}
startGame()
   
</script>

<!--closingBody-->
<%- include('include/_closingBody')%>
<!--closingBody-->    